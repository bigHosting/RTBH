# Configure logging
log syslog { debug, trace, info, remote, warning, error, auth, fatal, bug };
log stderr all;
#log "tmp" all;

# Override router ID
router id X.Y.90.93;

# Define another routing table
table as65533;
table blackholes;

# Turn on global debugging of all protocols
#debug protocols all;


protocol kernel {
#       learn;                  # Learn all alien routes from the kernel
        persist;                # Don't remove routes on bird shutdown
        scan time 20;           # Scan kernel routing table every 20 seconds
#       import none;            # Default is import all
        export all;             # Default is export none
}

# This pseudo-protocol watches all interface up/down events.
protocol device {
        scan time 10;           # Scan interfaces every 10 seconds
}

# Learns interface routes
protocol direct {
        interface "eth*";
}

# Scans and learns of blackhole routes from table 10, every 10 seconds
protocol kernel rtbh {
	table blackholes;
	kernel table 10;
	scan time 20;
	learn;
	import all;
	export all;
}

# Merges kernel route table 10 into the virtual as65533 routing table
protocol pipe {
	table as65533;
	peer table blackholes;
	mode transparent;
	import filter {
		print "Importing blackhole list.";
		accept;
	};
}

# Outband BGP filter 
filter bgp_out_upstream {
# Limit to blackholed routes
if (proto = "rtbh" ) then
		{
		# Limit to /32 netmask and set bgp next hop and bgp community
		if net.len = 128 then {
			bgp_community.add((YOUR_AS_NUMBER_HERE,666)); # RTBH
			bgp_community.add((65535,65281)); # no-export
			bgp_community.add((65535,65282)); # no-advertise
			bgp_next_hop = 2001:db8::192:0:2:1;
			printn "Nulling ";
			print net;
			accept;
			}
		}
reject;
}

# BGP Neighbors
protocol bgp crsv1_50_mia {
	table as65533;
#       disabled;
	description "CRSV1.50.MIA";
	local as 65533;
	neighbor 2001:XXXX:YYYY:12::5 as YOUR_AS_NUMBER_HERE;
	multihop;
	source address 2001:XXXX:YYYY:58:0:1:0:1;   # What local address we use for the TCP connection
#	password "secret";      # Password used for MD5 authentication
	export where source=RTS_STATIC;
	export filter bgp_out_upstream;
}
